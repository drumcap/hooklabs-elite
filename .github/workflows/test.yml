name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run TypeScript check
        run: npx tsc --noEmit

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          CI: true
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.TEST_CONVEX_URL }}
          LEMONSQUEEZY_API_KEY: ${{ secrets.TEST_LEMONSQUEEZY_API_KEY }}
          LEMONSQUEEZY_STORE_ID: ${{ secrets.TEST_LEMONSQUEEZY_STORE_ID }}
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      # Test database (if needed)
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.TEST_CONVEX_URL }}
          LEMONSQUEEZY_API_KEY: ${{ secrets.TEST_LEMONSQUEEZY_API_KEY }}
          LEMONSQUEEZY_STORE_ID: ${{ secrets.TEST_LEMONSQUEEZY_STORE_ID }}
          LEMONSQUEEZY_WEBHOOK_SECRET: ${{ secrets.TEST_LEMONSQUEEZY_WEBHOOK_SECRET }}
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: integration
          name: integration-tests
          fail_ci_if_error: false

  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run component tests
        run: npm run test:components
        env:
          CI: true
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.TEST_CONVEX_URL }}
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: components
          name: component-tests
          fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.TEST_CONVEX_URL }}
          LEMONSQUEEZY_API_KEY: ${{ secrets.TEST_LEMONSQUEEZY_API_KEY }}
          LEMONSQUEEZY_STORE_ID: ${{ secrets.TEST_LEMONSQUEEZY_STORE_ID }}
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.TEST_CONVEX_URL }}
          LEMONSQUEEZY_API_KEY: ${{ secrets.TEST_LEMONSQUEEZY_API_KEY }}
          LEMONSQUEEZY_STORE_ID: ${{ secrets.TEST_LEMONSQUEEZY_STORE_ID }}
      
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level high
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.TEST_CONVEX_URL }}
      
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  coverage-report:
    name: Coverage Report
    needs: [unit-tests, integration-tests, component-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate combined coverage report
        run: |
          npm run test:coverage
        env:
          CI: true
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.TEST_CONVEX_URL }}
          LEMONSQUEEZY_API_KEY: ${{ secrets.TEST_LEMONSQUEEZY_API_KEY }}
          LEMONSQUEEZY_STORE_ID: ${{ secrets.TEST_LEMONSQUEEZY_STORE_ID }}
      
      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: combined
          name: combined-coverage
          fail_ci_if_error: true
      
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  test-summary:
    name: Test Summary
    needs: [lint, unit-tests, integration-tests, component-tests, e2e-tests, security-scan, performance-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## 테스트 결과 요약" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 테스트 유형 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Component Tests | ${{ needs.component-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Test | ${{ needs.performance-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "❌ 일부 테스트가 실패했습니다." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ 모든 테스트가 성공했습니다!" >> $GITHUB_STEP_SUMMARY
          fi