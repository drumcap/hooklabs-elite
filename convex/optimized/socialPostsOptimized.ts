import { v } from "convex/values";
import { mutation, query } from "../_generated/server";
import { getAuthUserId } from "../auth";

// üìà ÏµúÏ†ÅÌôîÎêú Í≤åÏãúÎ¨º ÏÉÅÏÑ∏ Ï°∞Ìöå - Î∞∞Ïπò Ï≤òÎ¶¨Î°ú N+1 Î¨∏Ï†ú Ìï¥Í≤∞
export const getOptimized = query({
  args: { id: v.id("socialPosts") },
  handler: async (ctx, { id }) => {
    const userId = await getAuthUserId(ctx);
    if (!userId) {
      throw new Error("Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§");
    }

    // 1. Î©îÏù∏ Í≤åÏãúÎ¨º Ï°∞Ìöå
    const post = await ctx.db.get(id);
    if (!post || post.userId !== userId) {
      throw new Error("Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§");
    }

    // 2. Î∞∞ÏπòÎ°ú Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ ÎèôÏãú Ï°∞Ìöå (N+1 Ìï¥Í≤∞)
    const [persona, variants, schedules] = await Promise.all([
      ctx.db.get(post.personaId),
      ctx.db.query("postVariants")
        .withIndex("byPostId", (q) => q.eq("postId", id))
        .order("desc")
        .collect(),
      ctx.db.query("scheduledPosts")
        .withIndex("byPostId", (q) => q.eq("postId", id))
        .collect()
    ]);

    return {
      ...post,
      persona,
      variants,
      schedules,
      // Í≥ÑÏÇ∞Îêú Î©îÌä∏Î¶≠ Ï∂îÍ∞Ä
      variantCount: variants.length,
      selectedVariant: variants.find(v => v.isSelected),
      bestVariant: variants.reduce((best, current) => 
        current.overallScore > best.overallScore ? current : best, variants[0]
      ),
    };
  },
});

// üìà ÏµúÏ†ÅÌôîÎêú Í≤åÏãúÎ¨º Î™©Î°ù - ÌéòÏù¥ÏßïÍ≥º ÌîÑÎ¶¨Î°úÎî© Í≤∞Ìï©
export const listOptimized = query({
  args: {
    limit: v.optional(v.number()),
    cursor: v.optional(v.string()),
    status: v.optional(v.string()),
    personaId: v.optional(v.id("personas")),
    includeMetrics: v.optional(v.boolean()),
  },
  handler: async (ctx, { limit = 20, cursor, status, personaId, includeMetrics = false }) => {
    const userId = await getAuthUserId(ctx);
    if (!userId) {
      throw new Error("Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§");
    }

    let query = ctx.db
      .query("socialPosts")
      .withIndex("byUserId", (q) => q.eq("userId", userId));

    // Ìö®Ïú®Ï†ÅÏù∏ ÌïÑÌÑ∞ÎßÅ
    if (status) {
      query = query.filter((q) => q.eq(q.field("status"), status));
    }
    if (personaId) {
      query = query.filter((q) => q.eq(q.field("personaId"), personaId));
    }

    // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ï†ÅÏö©
    const result = await query
      .order("desc")
      .paginate({ cursor: cursor ?? null, numItems: limit });

    // Î©îÌä∏Î¶≠Ïù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ÏóêÎßå Ï∂îÍ∞Ä Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    if (includeMetrics && result.page.length > 0) {
      const postIds = result.page.map(p => p._id);
      const [personas, variantCounts] = await Promise.all([
        // ÌéòÎ•¥ÏÜåÎÇò Ï†ïÎ≥¥ Î∞∞Ïπò Ï°∞Ìöå
        Promise.all(
          [...new Set(result.page.map(p => p.personaId))].map(id => ctx.db.get(id))
        ),
        // Î≥ÄÌòï Í∞úÏàò Î∞∞Ïπò Ï°∞Ìöå
        Promise.all(
          postIds.map(async (postId) => {
            const count = await ctx.db
              .query("postVariants")
              .withIndex("byPostId", (q) => q.eq("postId", postId))
              .collect()
              .then(variants => variants.length);
            return { postId, count };
          })
        )
      ]);

      const personaMap = new Map(personas.filter(Boolean).map(p => [p._id, p]));
      const variantCountMap = new Map(variantCounts.map(vc => [vc.postId, vc.count]));

      return {
        ...result,
        page: result.page.map(post => ({
          ...post,
          persona: personaMap.get(post.personaId),
          variantCount: variantCountMap.get(post._id) || 0,
        }))
      };
    }

    return result;
  },
});

// üìà ÎåÄÏãúÎ≥¥Îìú ÌÜµÍ≥Ñ ÏµúÏ†ÅÌôî - Îã®Ïùº ÏøºÎ¶¨Î°ú ÏßëÍ≥Ñ
export const getDashboardStatsOptimized = query({
  args: {
    startDate: v.optional(v.string()),
    endDate: v.optional(v.string()),
  },
  handler: async (ctx, { startDate, endDate }) => {
    const userId = await getAuthUserId(ctx);
    if (!userId) {
      throw new Error("Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§");
    }

    // ÎÇ†Ïßú ÌïÑÌÑ∞ÎßÅÏù¥ ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå Ï†ÅÏö©
    let query = ctx.db
      .query("socialPosts")
      .withIndex("byUserId", (q) => q.eq("userId", userId));

    const posts = await query.collect();
    
    // Î©îÎ™®Î¶¨ÏóêÏÑú Ìö®Ïú®Ï†ÅÏù∏ ÏßëÍ≥Ñ (Îã®Ïùº Ìå®Ïä§)
    const stats = posts.reduce((acc, post) => {
      const postDate = post.createdAt;
      
      // ÎÇ†Ïßú ÌïÑÌÑ∞ÎßÅ
      if (startDate && postDate < startDate) return acc;
      if (endDate && postDate > endDate) return acc;
      
      acc.total++;
      acc.statusCount[post.status] = (acc.statusCount[post.status] || 0) + 1;
      acc.totalCreditsUsed += post.creditsUsed;
      
      return acc;
    }, {
      total: 0,
      statusCount: {} as Record<string, number>,
      totalCreditsUsed: 0,
    });

    return {
      total: stats.total,
      draft: stats.statusCount.draft || 0,
      scheduled: stats.statusCount.scheduled || 0,
      published: stats.statusCount.published || 0,
      failed: stats.statusCount.failed || 0,
      totalCreditsUsed: stats.totalCreditsUsed,
    };
  },
});

// üìà ÌéòÎ•¥ÏÜåÎÇòÎ≥Ñ Í≤åÏãúÎ¨º ÌÜµÍ≥Ñ ÏµúÏ†ÅÌôî
export const getPersonaPostStatsOptimized = query({
  args: {},
  handler: async (ctx) => {
    const userId = await getAuthUserId(ctx);
    if (!userId) {
      throw new Error("Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§");
    }

    // Î≥ëÎ†¨Î°ú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
    const [personas, allPosts] = await Promise.all([
      ctx.db.query("personas")
        .withIndex("byUserId", (q) => q.eq("userId", userId))
        .collect(),
      ctx.db.query("socialPosts")
        .withIndex("byUserId", (q) => q.eq("userId", userId))
        .collect()
    ]);

    // Î©îÎ™®Î¶¨ÏóêÏÑú Ìö®Ïú®Ï†ÅÏù∏ Í∑∏Î£πÌôî
    const postsByPersona = allPosts.reduce((acc, post) => {
      const personaId = post.personaId;
      if (!acc[personaId]) {
        acc[personaId] = [];
      }
      acc[personaId].push(post);
      return acc;
    }, {} as Record<string, typeof allPosts>);

    return personas.map(persona => ({
      personaId: persona._id,
      personaName: persona.name,
      postCount: postsByPersona[persona._id]?.length || 0,
      drafts: postsByPersona[persona._id]?.filter(p => p.status === "draft").length || 0,
      published: postsByPersona[persona._id]?.filter(p => p.status === "published").length || 0,
      totalCredits: postsByPersona[persona._id]?.reduce((sum, p) => sum + p.creditsUsed, 0) || 0,
    }));
  },
});

// üìà Î≤åÌÅ¨ Í≤åÏãúÎ¨º ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Î∞∞Ïπò Ï≤òÎ¶¨)
export const updateMultipleStatus = mutation({
  args: {
    postIds: v.array(v.id("socialPosts")),
    status: v.string(),
    publishedAt: v.optional(v.string()),
  },
  handler: async (ctx, { postIds, status, publishedAt }) => {
    const userId = await getAuthUserId(ctx);
    if (!userId) {
      throw new Error("Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§");
    }

    const now = new Date().toISOString();
    
    // Í∂åÌïú ÌôïÏù∏ÏùÑ ÏúÑÌï¥ Î∞∞Ïπò Ï°∞Ìöå
    const posts = await Promise.all(
      postIds.map(id => ctx.db.get(id))
    );

    const validPosts = posts.filter(post => 
      post && post.userId === userId
    );

    if (validPosts.length !== postIds.length) {
      throw new Error("ÏùºÎ∂Ä Í≤åÏãúÎ¨ºÏóê ÎåÄÌïú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§");
    }

    // Î∞∞Ïπò ÏóÖÎç∞Ïù¥Ìä∏
    await Promise.all(
      validPosts.map(post =>
        ctx.db.patch(post._id, {
          status,
          publishedAt,
          updatedAt: now,
        })
      )
    );

    return validPosts.map(p => p._id);
  },
});