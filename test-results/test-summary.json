{
  "summary": {
    "total": 2,
    "passed": 1,
    "failed": 1,
    "successRate": 50,
    "duration": 5445,
    "timestamp": "2025-09-03T00:38:34.287Z"
  },
  "suites": {
    "unit": {
      "status": "passed",
      "duration": 3438,
      "output": "\n> elite-next-starter@0.1.0 test:unit\n> vitest run __tests__/unit\n\n\n RUN  v3.2.4 /workspace/hooklabs-elite\n\n ✓ __tests__/unit/convex/coupons.test.ts (11 tests) 21ms\n ✓ __tests__/unit/convex/subscriptions.test.ts (13 tests) 19ms\n ✓ __tests__/unit/convex/usage.test.ts (5 tests) 15ms\n ✓ __tests__/unit/convex/credits.test.ts (7 tests) 26ms\n ✓ __tests__/unit/utils/social-validation.test.ts (48 tests) 44ms\n ✓ __tests__/unit/convex/social/personas.test.ts (21 tests) 28ms\n ✓ __tests__/unit/convex/social/socialPosts.test.ts (26 tests) 46ms\n ✓ __tests__/unit/utils/social-scoring.test.ts (38 tests) 26ms\n\n Test Files  8 passed (8)\n      Tests  169 passed (169)\n   Start at  09:38:29\n   Duration  2.72s (transform 1.47s, setup 1.10s, collect 2.78s, tests 226ms, environment 5.87s, prepare 1.30s)\n\n"
    },
    "integration": {
      "status": "failed",
      "duration": 2001,
      "error": "\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 9 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  __tests__/integration/api/lemonsqueezy-checkout.test.ts > /api/lemonsqueezy/checkout > should handle network error\nAssertionError: expected 200 to be 500 // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- 500\u001b[39m\n\u001b[31m+ 200\u001b[39m\n\n ❯ __tests__/integration/api/lemonsqueezy-checkout.test.ts:270:27\n    268|     const result = await createCheckoutWithNetworkError(requestData)\n    269| \n    270|     expect(result.status).toBe(500)\n       |                           ^\n    271|     expect(result.json.error).toBe('Network error occurred')\n    272|   })\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/9]⎯\n\n FAIL  __tests__/integration/api/lemonsqueezy-portal.test.ts > /api/lemonsqueezy/portal > should handle Lemon Squeezy API error\nAssertionError: expected 200 to be 500 // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- 500\u001b[39m\n\u001b[31m+ 200\u001b[39m\n\n ❯ __tests__/integration/api/lemonsqueezy-portal.test.ts:146:27\n    144|     const result = await createPortalHandler(requestData)\n    145| \n    146|     expect(result.status).toBe(500)\n       |                           ^\n    147|     expect(result.json.error).toBe('Failed to create customer portal')\n    148|   })\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/9]⎯\n\n FAIL  __tests__/integration/api/lemonsqueezy-portal.test.ts > /api/lemonsqueezy/portal > should handle network error\nAssertionError: expected 'Failed to create customer portal' to be 'Network error occurred' // Object.is equality\n\nExpected: \u001b[32m\"Network error occurred\"\u001b[39m\nReceived: \u001b[31m\"Failed to create customer portal\"\u001b[39m\n\n ❯ __tests__/integration/api/lemonsqueezy-portal.test.ts:160:31\n    158| \n    159|     expect(result.status).toBe(500)\n    160|     expect(result.json.error).toBe('Network error occurred')\n       |                               ^\n    161|   })\n    162| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/9]⎯\n\n FAIL  __tests__/integration/api/lemonsqueezy-portal.test.ts > /api/lemonsqueezy/portal > should handle rate limiting\nAssertionError: expected 200 to be 429 // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- 429\u001b[39m\n\u001b[31m+ 200\u001b[39m\n\n ❯ __tests__/integration/api/lemonsqueezy-portal.test.ts:271:27\n    269|     const result = await handleRateLimit(requestData)\n    270| \n    271|     expect(result.status).toBe(429)\n       |                           ^\n    272|     expect(result.json.error).toBe('Rate limit exceeded')\n    273|     expect(result.json.retryAfter).toBe(60)\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/9]⎯\n\n FAIL  __tests__/integration/social/gemini-integration.test.ts > Gemini AI Integration Tests > 기본 콘텐츠 생성 > 기본 프롬프트로 콘텐츠를 생성해야 함\nAssertionError: expected 0 to be greater than 0\n ❯ __tests__/integration/social/gemini-integration.test.ts:309:37\n    307|       expect(result.content.length).toBeGreaterThan(0);\n    308|       expect(result.tokensUsed).toBeGreaterThan(0);\n    309|       expect(result.generationTime).toBeGreaterThan(0);\n       |                                     ^\n    310|     });\n    311| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/9]⎯\n\n FAIL  __tests__/integration/social/gemini-integration.test.ts > Gemini AI Integration Tests > 토큰 사용량 추적 > 토큰 사용량을 정확히 추적해야 함\nAssertionError: expected +0 to be undefined // Object.is equality\n\n\u001b[32m- Expected:\u001b[39m \nundefined\n\n\u001b[31m+ Received:\u001b[39m \n0\n\n ❯ __tests__/integration/social/gemini-integration.test.ts:531:33\n    529| \n    530|       expect(result.success).toBe(true);\n    531|       expect(result.tokensUsed).toBe(mockTokenUsage.totalTokenCount);\n       |                                 ^\n    532|     });\n    533| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/9]⎯\n\n FAIL  __tests__/integration/social/gemini-integration.test.ts > Gemini AI Integration Tests > 성능 최적화 > 생성 시간을 측정해야 함\nAssertionError: expected 0 to be greater than 0\n ❯ __tests__/integration/social/gemini-integration.test.ts:571:37\n    569|       const result = await aiService.generateContent('성능 테스트');\n    570| \n    571|       expect(result.generationTime).toBeGreaterThan(0);\n       |                                     ^\n    572|       expect(typeof result.generationTime).toBe('number');\n    573|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/9]⎯\n\n FAIL  __tests__/integration/social/twitter-integration.test.ts > Twitter API Integration Tests > 스레드 발행 > 스레드 중간에 실패하면 에러를 반환해야 함\nAssertionError: expected 'Second tweet failed' to contain 'Failed to publish tweet 2'\n\nExpected: \u001b[32m\"\u001b[7mFailed to publish\u001b[27m tweet \u001b[7m2\u001b[27m\"\u001b[39m\nReceived: \u001b[31m\"\u001b[7mSecond\u001b[27m tweet \u001b[7mfailed\u001b[27m\"\u001b[39m\n\n ❯ __tests__/integration/social/twitter-integration.test.ts:522:28\n    520| \n    521|       expect(result.success).toBe(false);\n    522|       expect(result.error).toContain('Failed to publish tweet 2');\n       |                            ^\n    523|     });\n    524|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/9]⎯\n\n FAIL  __tests__/integration/social/twitter-integration.test.ts > Twitter API Integration Tests > 토큰 관리 > 토큰 만료 시 자동 갱신을 처리해야 함\nAssertionError: expected false to be true // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- true\u001b[39m\n\u001b[31m+ false\u001b[39m\n\n ❯ __tests__/integration/social/twitter-integration.test.ts:712:34\n    710|       mockTwitterClient.v2.me.mockResolvedValueOnce({ data: mockTwitte…\n    711|       const userResult = await twitterService.getUserInfo(refreshResul…\n    712|       expect(userResult.success).toBe(true);\n       |                                  ^\n    713|     });\n    714|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/9]⎯\n\n"
    }
  }
}